#print to the screen messages
#This prints Hello, World! to the screen
print("Hello, World!")

#The print function will not work unless the characters have "" around them, denoting the string
pring(This will not work, because I did not make it a string with quotes.)

#The print function can perform calculations within the function
print(7+3)

#The print function can also combine strings
print("Hello," + " " + "World!")

#However, print cannot combine different data types in a single function, for example, this will not work
print(7 + "10")
#This is trying to add an integer to a string as far as Python is concerned, and will not work

#But an integer and a float can be calculated in the same print function, for example,
print(7+10.2)
#This is implicit conversion, Python (in the background) changes the integer to a float, then performs the calculation and returns a float for an answer

#If we want to perform a calculation between an integer and a string, we need to do an explicit conversion where we tell Python what data type to use, for example
base = 6
height - 10
area = (base*height)/2 #triangle
print("The area of the triangle is: " + str(area))
#Within the print function, we told Python to explicitly change the data type of the variable area to a string

#The print function can pass multiple arguments separated by commas, for example,
month = January
print("Investigate failed login attempts during", month, "if more than", 100)
#Note that we did not have to put a space after the word during or than, because of the commas, Python will place a space there automatically

#Data types can be determined using the type function within the print function, for example
print(type("8"))
#This returns a <class 'str'>, which means string because we used "" around the number

#Annotating variables
#This is a practice used to help communicate what data type is used in a variable in the code, for example
age: int = 73
#This means the age variable is meant to be an integer, like the number 73
#Modern IDEs like VS Code have automated tools to check data types
#Data type annotation is most useful when doing object-oriented programming or writing functions, otherwise, it just adds to the burden of manually mapping data types every time a new data set is used

#Defining functions that are not already included in Python
#start by using the def keyword to denote the beginning of defining a function, followed by the name of the custom function, then include the parameter(s) of the function within (), followed by a :
#Begin the body of the function, which defines what the function will do; this can be any other already defined function, calculation, etc. For example
def greeting(name):
    print("Hello, " + name)
# Now we can call the custom greeting function over and over as many times as needed within the program.

#Defined functions can have multiple parameters, for example
def greeting (name, department):
    print("Welcome, " + name)
    print("You are part of " + department)

#Pre-defined functions
#We have already discussed print(), type(), str(), but here are a few more
#sorted() will sort an iterable list of parameters from smallest to largest, of different data types, for example,
time_list = [12, 2, 32, 19, 57, 22, 14]
print(sorted(time_list))
#Note, sorted() does not change the list under the variable, just sorts the one time, in this example, for the print() function

#max() and min() functions return the max or min in a list, for example,
time_list = [12, 2, 32, 19, 57, 22, 14]
print(min(time_list)) #returns 2
print(max(time_list)) #returns 57

#We can ask the program to temporarily store a value from a function we defined, this is called return, for example,
def area_triangle(base, height):
    return base*height/2
#Now we can create variables with this function,
area_a = area_triangle(5,4)
area_b = area_triangle(7,3)
sum = area_a + area_b
print("The sum of both areas is: " + str(sum))

#We are not limited to returning just one value
def convert_seconds(seconds):
    hours = seconds // 3600 #// is a floor division, returning only the integer of a calculation, for example,  5//2 is 2 instead of 2.5.
    minutes = (seconds - hours * 3600) // 60
    remaining_seconds = seconds - hours * 3600 - minutes * 60
    return hours, minutes, remaining_seconds

#Important to note that because the function returns three values, we need to define three variables separated by commas
hours, minutes, seconds = convert_seconds(5000)
print(hours, minutes, seconds) #results in 1 23 20

#Comparing values
print(10>1) #Returns True