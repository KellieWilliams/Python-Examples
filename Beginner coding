#print to the screen messages
#This prints Hello, World! to the screen
print("Hello, World!")

#The print function will not work unless the characters have "" around them, denoting the string
pring(This will not work, because I did not make it a string with quotes.)

#The print function can perform calculations within the function
print(7+3)

#The print function can also combine strings
print("Hello," + " " + "World!")

#However, print cannot combine different data types in a single function, for example, this will not work
print(7 + "10")
#This is trying to add an integer to a string as far as Python is concerned, and will not work

#But an integer and a float can be calculated in the same print function, for example,
print(7+10.2)
#This is implicit conversion, Python (in the background) changes the integer to a float, then performs the calculation and returns a float for an answer

#If we want to perform a calculation between an integer and a string, we need to do an explicit conversion where we tell Python what data type to use, for example
base = 6
height - 10
area = (base*height)/2 #triangle
print("The area of the triangle is: " + str(area))
#Within the print function, we told Python to explicitly change the data type of the variable area to a string

#The print function can pass multiple arguments separated by commas, for example,
month = January
print("Investigate failed login attempts during", month, "if more than", 100)
#Note that we did not have to put a space after the word during or than, because of the commas, Python will place a space there automatically

#Data types can be determined using the type function within the print function, for example
print(type("8"))
#This returns a <class 'str'>, which means string because we used "" around the number

#Annotating variables
#This is a practice used to help communicate what data type is used in a variable in the code, for example
age: int = 73
#This means the age variable is meant to be an integer, like the number 73
#Modern IDEs like VS Code have automated tools to check data types
#Data type annotation is most useful when doing object-oriented programming or writing functions, otherwise, it just adds to the burden of manually mapping data types every time a new data set is used

#Defining functions that are not already included in Python
#start by using the def keyword to denote the beginning of defining a function, followed by the name of the custom function, then include the parameter(s) of the function within (), followed by a :
#Begin the body of the function, which defines what the function will do; this can be any other already defined function, calculation, etc. For example
def greeting(name):
    print("Hello, " + name)
# Now we can call the custom greeting function over and over as many times as needed within the program.

#Defined functions can have multiple parameters, for example
def greeting (name, department):
    print("Welcome, " + name)
    print("You are part of " + department)

#Pre-defined functions
#We have already discussed print(), type(), str(), but here are a few more
#sorted() will sort an iterable list of parameters from smallest to largest, of different data types, for example,
time_list = [12, 2, 32, 19, 57, 22, 14]
print(sorted(time_list))
#Note, sorted() does not change the list under the variable, just sorts the one time, in this example, for the print() function

#max() and min() functions return the max or min in a list, for example,
time_list = [12, 2, 32, 19, 57, 22, 14]
print(min(time_list)) #returns 2
print(max(time_list)) #returns 57

#We can ask the program to temporarily store a value from a function we defined, this is called return, for example,
def area_triangle(base, height):
    return base*height/2
#Now we can create variables with this function,
area_a = area_triangle(5,4)
area_b = area_triangle(7,3)
sum = area_a + area_b
print("The sum of both areas is: " + str(sum))

#We are not limited to returning just one value
def convert_seconds(seconds):
    hours = seconds // 3600 #// is a floor division, returning only the integer of a calculation, for example,  5//2 is 2 instead of 2.5.
    minutes = (seconds - hours * 3600) // 60
    remaining_seconds = seconds - hours * 3600 - minutes * 60
    return hours, minutes, remaining_seconds

#Important to note that because the function returns three values, we need to define three variables separated by commas
hours, minutes, seconds = convert_seconds(5000)
print(hours, minutes, seconds) #results in 1 23 20

#Comparing values
print(10>1) #Returns True, Boolean style

print("cat" == "dog") #== is asking if two things are equal to each other, this example returns False

print(1 != 2) #!= is asking if two things are not equal to each other, this example returns True

#Strings can be compared using > and <. The > denotes something coming later in the alphabet, for example, Yellow > Cyan would be True
#Note that there are numeric values associated with letters (ASCII values) which is what Python is comparing. Because of this, uppercase letters come first, then lowercase

#Logic can be inverted using the not operator, for example
print(not 42 == "Answer") #This is true, even though an int and a str are being compared, because not is in front of the operation

#Additionally there are logical operators that can be added to the parameters for comparision, namely and, or, and not
print(5>1 and 5<10) #This returns true because both arguments are true
print(5>1 and 5=1)  #This returns false because one or more of the arguments is false
print(5>1 or 5=1) #This returns true because at least one of the arguments is true
print(5<1 or 5=1) #This returns false because all arguments are false

#Branching
#We can ask Python to make decisions based on criteria using the if function, for example
def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long.")
#This checks to see if a user has inputted a username with a certain number of characters, if more than 3 no error message (Python skips the code), if less than 3, the error message is displayed

#If we want Python to perform a task when the if statement is not met (instead of skipping like above), then we use the else statement, for example
def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 chraacters long.")
    else:
        print("Valid username.")

#The modulo operator, %, returns the remainder of a number after division
#For example, we want to know if a number is even or not, if even, when divided by 2, the remainder will be 0
def is_even(number):
    if number % 2 == 0:
        return True
    return False #You can write the else statement here, but it's not needed because return is the end of the function as far as Python is concerned, so if return True didn't happen, then return False will happen and the function ends.

#elif statements (else/if)
#Sometimes we want Python to make more than one decision in an if statement, we use elif to stage those steps, for example
def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long.")
    elif len(username) > 15:
        print("Invlaid username. Must be at most 15 characters long.")
    else:
        print("Valid username")

#Loops
#While Loops - continuously execute code based on value of a condition, for example - use when you want to repeat an action until a condition changes
x = 0
while x < 5:
    print("Not there yet, x=" + str(x))
    x = x + 1
print("x=" x str(x))
#This function will continue to loop until x = 5.

def attempts(n):
    x =1 
    while x <= n: #greater than OR equal to, so when x = 5, it continues, because it's equal to
        print("Attempt" +str(x))
        x += 1 #Shorthand for x = x + 1
    print("Done")
attempts (5)
#This function compares the variables x and n. In the first loop x=1 and n=5, so we will get a Attempt 1 print followed by an itteration of x+1 to now equal 2 and so on until x=6 then prints Done
#Important to note, conditions for while loops need to end in true or false for them to perform

#variables that are defined before new functions retain that variable, so be sure to redefine if resuing the same variable as needed, for example
x = 1
sum = 0
while x < 10:
    sum += x
    x += 1

product = 1
while x < 10
    product = product * x
    x += 1
#Here we forget to redefine x back to 1, so when the second loop runs, x is still 10 from the previous loop

#Because loops use conditions to tell them when to stop, it's possible to create infinite loops if conditions are never met. For example,
while x % 2 == 0:
    x = x / 2
#This is checking if a number is even, but if x = 0, the remainder would be 0, and then being divided by 2 remains 0 and then the loop never ends.
#To fix this, we need to add a condition where x cannot be 0, for example
if x != 0:
    while x % 2 == 0:
        x = x/2
#This checks if x = 0 first before entering the loop avoiding the infinite loop.
#It can also be written in this format,
while x != 0 and x % 2 == 0:
    x = x / 2

#The break keyword can be used in order to stop infinite loops

#For loop - iterates over a sequence of values - use when there's a sequence of elements you want to iterate
for x in range(5): #range starts with 0 by default and the list of numbers generated will end one less than the given value
    print(x)
#This returns 0, 1, 2, 3, and 4. There are 5 values, but ends at 4 because it starts at 0

#the for loop can iterate over strings as well, this is where it differs from the while loop, for example
friends = ['Taylor', 'Alex', 'Pat', 'Eli']
for friend in friends:
    print("Hi" + friend)
#This returns a list of messages saying Hi + the name of each friend listed in the friends list

#If you want range() to start at another number besides the 0 default, enter two parameters separated by commas, the first is the start number, the sencond is the end iteration
range(1,10) #starts at 1, ends at 9

#If we want a larger step between iterations besides 1, add a third parameter, again separated by commas
def to_celsius(x):
    return (x-32)*5/9
for x in range(0,101,10) #This starts at 0, goes to 100, in steps of 10
    print(x, to_celsius(x))
#This returns a list of 10 °F degrees, starting at 0, ending at 100 with the conversion to °C just to the right

#range() can also iterate backwards by denoting a negative number as the last parameter, for example
for x in range(2, -3, -1)
    print(x)
#This results in a list of 2, 1, 0, -1, -2

values = [ 23, 52, 59, 37, 48 ]
sum = 0
length = 0
for value in values:
    sum += value #Increases the sum variable each iteration by the next value in the list until whole list is done
    length += 1 #Calculates how many values are in the list
print("Total sum: " + str(sum) + " - Average: " + str(sum/length))

#Nested for loops
#If we wanted to list all of the dominos in a set, we would use the following example
for left in range(7):
    for right in range(left, 7):
        printi("[" + str(left) + "|" +str(right) + "]", end=" ") #end is a new parameter which tells print how to end a line, in this case a space, if not included print defaults to newline
    print()
#This results in
#[0|0] [0|1] [0|2] etc
#[1|1] [1|2] etc
#[1|0] is skipped because it's the same as [0|1] in the game
#The first iteration, left = 0, gets entered into the next for loop at range(0,7) which results in the first iteration of the second loop for right = 0, so [0|0]
#The second iteration, we're still in left = 0, then right = 1, so [0|1] and so on until right = 6
#The eighth iteration, we return to left now = 1, and right in range(1,7) so right = 1
#The ninth iteration, left still = 1, and right = 2 and so on until the first for loop is exausted at [6|6]

#We want all combos of 4 basketball teams to be listed, and teams cannot play against itself, so make a condition where the pairings are different
teams = [ 'Dragons', 'Wolves', 'Pandas', 'Unicorns'] #Either single or double quotes can be used to denote strings, but do not mix them, causes an error
for home_team in teams:
    for away_team in teams:
        if home_team != away_team:
            print(home_team + " vs " + away_team)

#Important to note that loops take computer processing time to complete. The more elements in a list, the longer the computing time. Nesting the loops increasees this time exponentially.

#Strings can be used as a list, for example
greeting = "Hello"
for c in greeting:
    print("The next characters is:" , c)
#This results in H e l l o in vertical.

#You can also get the position of a character within a string
greeting = "Hello"
for i in range(len(greeting)):
    print(i)
#This results in 0 1 2 3 4 in vertical

#Slicing strings is done by using [] and parameters within those brackets, for example
string1 = "Greetings, Earthlings"
print(string1[0])   # Prints “G”
print(string1[4:8]) # Prints “ting”
print(string1[11:]) # Prints “Earthlings”
print(string1[:5])  # Prints “Greet”
print(string1[-10:]) # Prints “Earthlings” again
print(string1[55:]) # Prints "" because the parameters are beyond the length of string1
print(string1[0::2]) # Prints “Getns atlns”, the double : : means to stride through the slice at the last parameter length
print(string1[::-1]) # Prints “sgnilhtraE ,sgniteerG” because of the -1 in the stride 

#To combine joining and slicing a string
def format_phone(phonenum):
    area_code = "(" + phonenum[:3] + ")"
    exchange = phonenum[3:6]
    line = phonenum[-4:]
    return area_code + " " + exchange + "-" + line

format_phone('2025551212') # Prints (202) 555-1212

#Recursion - The repeated application of the same procedure to a smaller problem
#Use this to have a function call itself until a condition is met, for example
def factorial(n):
    print("Factorial called with " + str(n))
    if n < 2:
        print("REturning 1")
        return 1
    result = n * factorial(n-1)
    print("Returning " + str(result) + " for factorial of " + str(n))
    return result

#using factorial(4) results in
#Factorial called with 4
#Factorial called with 3
#Factorial called with 2
#Factorial called with 1
#Returning 1
#Returning 2 for factorial of 2
#Returning 6 for factorial of 3
#Returning 24 for factorial of 4
#24

#In an actual program the above would be written as
def factorial(n):
    if n < 2:
        return 1
    return n * factorial(n-1)
#The first example has print() functions so we can see how the recursion works, step by step. Here factorial(4) would just display 24.

#Important to note that Python allows a recursion of 1,000 times max.