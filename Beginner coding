#print to the screen messages
#This prints Hello, World! to the screen
print("Hello, World!")

#The print function will not work unless the characters have "" around them, denoting the string
pring(This will not work, because I did not make it a string with quotes.)

#The print function can perform calculations within the function
print(7+3)

#The print function can also combine strings
print("Hello," + " " + "World!")

#However, print cannot combine different data types in a single function, for example, this will not work
print(7 + "10")
#This is trying to add an integer to a string as far as Python is concerned, and will not work

#But an integer and a float can be calculated in the same print function, for example,
print(7+10.2)
#This is implicit conversion, Python (in the background) changes the integer to a float, then performs the calculation and returns a float for an answer

#If we want to perform a calculation between an integer and a string, we need to do an explicit conversion where we tell Python what data type to use, for example
base = 6
height - 10
area = (base*height)/2 #triangle
print("The area of the triangle is: " + str(area))
#Within the print function, we told Python to explicitly change the data type of the variable area to a string

#The print function can pass multiple arguments separated by commas, for example,
month = January
print("Investigate failed login attempts during", month, "if more than", 100)
#Note that we did not have to put a space after the word during or than, because of the commas, Python will place a space there automatically

#Data types can be determined using the type function within the print function, for example
print(type("8"))
#This returns a <class 'str'>, which means string because we used "" around the number

#Annotating variables
#This is a practice used to help communicate what data type is used in a variable in the code, for example
age: int = 73
#This means the age variable is meant to be an integer, like the number 73
#Modern IDEs like VS Code have automated tools to check data types
#Data type annotation is most useful when doing object-oriented programming or writing functions, otherwise, it just adds to the burden of manually mapping data types every time a new data set is used

#Defining functions that are not already included in Python
#start by using the def keyword to denote the beginning of defining a function, followed by the name of the custom function, then include the parameter(s) of the function within (), followed by a :
#Begin the body of the function, which defines what the function will do; this can be any other already defined function, calculation, etc. For example
def greeting(name):
    print("Hello, " + name)
# Now we can call the custom greeting function over and over as many times as needed within the program.

#Defined functions can have multiple parameters, for example
def greeting (name, department):
    print("Welcome, " + name)
    print("You are part of " + department)

#Pre-defined functions
#We have already discussed print(), type(), str(), but here are a few more
#sorted() will sort an iterable list of parameters from smallest to largest, of different data types, for example,
time_list = [12, 2, 32, 19, 57, 22, 14]
print(sorted(time_list))
#Note, sorted() does not change the list under the variable, just sorts the one time, in this example, for the print() function

#max() and min() functions return the max or min in a list, for example,
time_list = [12, 2, 32, 19, 57, 22, 14]
print(min(time_list)) #returns 2
print(max(time_list)) #returns 57

#We can ask the program to temporarily store a value from a function we defined, this is called return, for example,
def area_triangle(base, height):
    return base*height/2
#Now we can create variables with this function,
area_a = area_triangle(5,4)
area_b = area_triangle(7,3)
sum = area_a + area_b
print("The sum of both areas is: " + str(sum))

#We are not limited to returning just one value
def convert_seconds(seconds):
    hours = seconds // 3600 #// is a floor division, returning only the integer of a calculation, for example,  5//2 is 2 instead of 2.5.
    minutes = (seconds - hours * 3600) // 60
    remaining_seconds = seconds - hours * 3600 - minutes * 60
    return hours, minutes, remaining_seconds

#Important to note that because the function returns three values, we need to define three variables separated by commas
hours, minutes, seconds = convert_seconds(5000)
print(hours, minutes, seconds) #results in 1 23 20

#Comparing values
print(10>1) #Returns True, Boolean style

print("cat" == "dog") #== is asking if two things are equal to each other, this example returns False

print(1 != 2) #!= is asking if two things are not equal to each other, this example returns True

#Strings can be compared using > and <. The > denotes something coming later in the alphabet, for example, Yellow > Cyan would be True
#Note that there are numeric values associated with letters (ASCII values) which is what Python is comparing. Because of this, uppercase letters come first, then lowercase

#Logic can be inverted using the not operator, for example
print(not 42 == "Answer") #This is true, even though an int and a str are being compared, because not is in front of the operation

#Additionally there are logical operators that can be added to the parameters for comparision, namely and, or, and not
print(5>1 and 5<10) #This returns true because both arguments are true
print(5>1 and 5=1)  #This returns false because one or more of the arguments is false
print(5>1 or 5=1) #This returns true because at least one of the arguments is true
print(5<1 or 5=1) #This returns false because all arguments are false

#Branching
#We can ask Python to make decisions based on criteria using the if function, for example
def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long.")
#This checks to see if a user has inputted a username with a certain number of characters, if more than 3 no error message (Python skips the code), if less than 3, the error message is displayed

#If we want Python to perform a task when the if statement is not met (instead of skipping like above), then we use the else statement, for example
def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 chraacters long.")
    else:
        print("Valid username.")

#The modulo operator, %, returns the remainder of a number after division
#For example, we want to know if a number is even or not, if even, when divided by 2, the remainder will be 0
def is_even(number):
    if number % 2 == 0:
        return True
    return False #You can write the else statement here, but it's not needed because return is the end of the function as far as Python is concerned, so if return True didn't happen, then return False will happen and the function ends.

#elif statements (else/if)
#Sometimes we want Python to make more than one decision in an if statement, we use elif to stage those steps, for example
def hint_username(username):
    if len(username) < 3:
        print("Invalid username. Must be at least 3 characters long.")
    elif len(username) > 15:
        print("Invlaid username. Must be at most 15 characters long.")
    else:
        print("Valid username")

#Loops
#While Loops - continuously execute code based on value of a condition, for example
x = 0
while x < 5:
    print("Not there yet, x=" + str(x))
    x = x + 1
print("x=" x str(x))
#This function will continue to loop until x = 5.

def attempts(n):
    x =1 
    while x <= n: #greater than OR equal to, so when x = 5, it continues, because it's equal to
        print("Attempt" +str(x))
        x += 1 #Shorthand for x = x + 1
    print("Done")
attempts (5)
#This function compares the variables x and n. In the first loop x=1 and n=5, so we will get a Attempt 1 print followed by an itteration of x+1 to now equal 2 and so on until x=6 then prints Done
#Important to note, conditions for while loops need to end in true or false for them to perform

#variables that are defined before new functions retain that variable, so be sure to redefine if resuing the same variable as needed, for example
x = 1
sum = 0
while x < 10:
    sum += x
    x += 1

product = 1
while x < 10L
    product = product * x
    x += 1
#Here we forget to redefine x back to 1, so when the second loop runs, x is still 10 from the previous loop

#Because loops use conditions to tell them when to stop, it's possible to create infinite loops if conditions are never met. For example,
while x % 2 == 0:
    x = x / 2
#This is checking if a number is even, but if x = 0, the remainder would be 0, and then being divided by 2 remains 0 and then the loop never ends.
#To fix this, we need to add a condition where x cannot be 0, for example
if x != 0:
    while x % 2 == 0:
        x = x/2
#This checks if x = 0 first before entering the loop avoiding the infinite loop.
#It can also be written in this format,
while x != 0 and x % 2 == 0:
    x = x / 2

#The break keyword can be used in order to stop infinite loops

